{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","checkValidity","rules","isValid","trim","maxLength","length","test","isNumeric","switchSignupAuthHandler","setState","prevState","console","log","inputChangedhandler","event","controlName","updatedControls","target","submitHandler","preventDefault","props","onAuth","this","buildBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","changed","inValid","shouldValidate","valueType","loading","errorMessage","error","style","color","message","authRedirect","isAuthenticated","to","className","Classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","authAction","input","inputElement","inputClasses","InputElement","Invalid","validationError","ValidationError","join","onChange","options","op","displayValue","Input","Label","label","module","exports"],"mappings":"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","file":"static/js/4.5d56ffa4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Classes from './Auth.module.css';\r\nimport * as authAction from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'Your E-Mail'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      password: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'password',\r\n          placeholder: 'Your Password'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 7\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n\r\n    },\r\n    isSignUp: true\r\n  }\r\n  componentDidMount() {\r\n    if (!this.props.buildBurger && this.props.authRedirectPath !== '/') {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n  checkValidity=(value, rules) => {\r\n    let isValid = true;\r\n    if (rules.required) {\r\n      isValid = value.trim() !== '' && isValid;\r\n    }\r\n    if (rules.maxLength) {\r\n      isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n    if (rules.isEmail) {\r\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n      isValid = pattern.test(value) && isValid\r\n    }\r\n\r\n    if (rules.isNumeric) {\r\n      const pattern = /^\\d+$/;\r\n      isValid = pattern.test(value) && isValid\r\n    }\r\n\r\n    return isValid;\r\n\r\n  }\r\n  switchSignupAuthHandler = () => {\r\n    this.setState(prevState => {\r\n      console.log('Switch Handler', prevState);\r\n      return {\r\n        isSignUp: !prevState.isSignUp\r\n      }\r\n    });\r\n  }\r\n  inputChangedhandler = (event, controlName) => {\r\n    const updatedControls = {\r\n      ...this.state.controls,\r\n      [controlName]: {\r\n        ...this.state.controls[controlName],\r\n        value: event.target.value,\r\n        valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n        touched: true\r\n      }\r\n    };\r\n    this.setState({\r\n      controls: updatedControls\r\n    });\r\n  }\r\n  submitHandler =(event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignUp);\r\n  }\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key]\r\n      });\r\n    }\r\n    let form = formElementsArray.map(formElement => (\r\n      <Input key={formElement.id}\r\n      elementConfig={formElement.config.elementConfig}\r\n      value={formElement.config.value}\r\n      changed={(event) => this.inputChangedhandler(event, formElement.id)}\r\n      inValid={!formElement.config.valid}\r\n      shouldValidate={formElement.config.validation}\r\n      touched={formElement.config.touched}\r\n      valueType={formElement.id} />\r\n    ));\r\n    if (this.props.loading) {\r\n      form = <Spinner/>;\r\n    }\r\n    let errorMessage = null;\r\n\r\n    if (this.props.error) {\r\n      errorMessage = (<p style={{\r\n        color: 'red'\r\n      }}>{this.props.error.message}</p>);\r\n    }\r\n    let authRedirect = null;\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n    }\r\n    return (\r\n      <div className={Classes.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\" >Submit </Button>\r\n                </form>\r\n                <Button\r\n      btnType='Danger'\r\n      clicked={this.switchSignupAuthHandler} >SWITCH TO {this.state.isSignUp ? 'SIGN-IN' : 'SIGN-UP'}</Button>\r\n            </div>\r\n      );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath\r\n  };\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) => dispatch(authAction.authenticate(email, password, isSignUp)),\r\n    onSetAuthRedirectPath: () => dispatch(authAction.setAuthRedirectPath('/'))\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\r\nimport Classes from './Input.module.css';\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [Classes.InputElement];\r\n  if (props.inValid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(Classes.Invalid);\r\n  }\r\n  let validationError = null;\r\n  if (props.inValid && props.touched) {\r\n    validationError = <p className={Classes.ValidationError}>Please enter a valid {props.valueType}</p>;\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case( 'input'):\r\n      inputElement = <input  className={inputClasses.join(' ')}\r\n      {...props.elementConfig}\r\n      value={props.value} onChange={props.changed}/>\r\n      break;\r\n    case( 'textarea'):\r\n      inputElement = <textarea className={inputClasses.join(' ')}\r\n      {...props.elementConfig}\r\n      value={props.value} onChange={props.changed}/>;\r\n      break;\r\n    case( 'select'):\r\n      inputElement = (<select className={inputClasses.join(' ')}\r\n      value={props.value} onChange={props.changed}>\r\n          {props.elementConfig.options.map((op) => (\r\n        <option key={op.value} value={op.value}>{op.displayValue}</option>\r\n      ))}\r\n      </select>);\r\n      break;\r\n    default:\r\n      inputElement = <input className={inputClasses.join(' ')}\r\n      {...props.elementConfig}\r\n      value={props.value} onChange={props.changed}/>;\r\n  }\r\n\r\n  return (\r\n    <div className={Classes.Input}>\r\n        <label className={Classes.Label}>{props.label}</label>\r\n        {inputElement}\r\n        {validationError}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__8A5wc\",\"Label\":\"Input_Label__38lc5\",\"InputElement\":\"Input_InputElement__3Q6er\",\"Invalid\":\"Input_Invalid__15ZDl\",\"ValidationError\":\"Input_ValidationError__25GVl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2f0JQ\",\"Input\":\"Auth_Input__-YJk_\"};"],"sourceRoot":""}